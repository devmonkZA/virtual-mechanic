Revision History

||Change	|| Version||
||Unit testing table added	||2||
||Testing steps formalized	||2||
||Potential bugs made a section	||2||
||Integration table updated (test date, success columns added)	||2||
||Version 1 User acceptance test table added	||2||
||Size and complexity table updated	||2||

|| Method Name|| Input||Expected output ||Function ||Tested? || Last date tested|| Comments||
|| menuSelect(sender id)||Object (button that was clicked), a main menu button, then extract the corresponding tag number from the button || Gets the tag number of the button, gets the view corresponding to the tag number, then sends the corresponding view to MainMenuController.||Switch view according to button tag (Start, download, settings) ||YES ||5/11/2009 ||Tags: Start = 1, download new = 2, settings = 3 || 
||menuSelect(sender id), tag 1 received (SelectMachineViewController view) || "Start" button object pressed|| Shows SelectMachineViewController view, shows list of machines available (Version 1.0 has Computer only)|| Shows the machine selection menu|| || 5/11/2009|| || 
|| menuSelect(sender id), tag 3 received (SettingViewController view)||"Settings" button object pressed||Shows SettingViewController, runs modCell() which increases the width and text of the table cells (refer to screenshots of settings menu), shows modified table in view || Shows the settings menu, with bigger rows and 'nicer' text|| YES || 5/11/2009|| || 
|| (NSIndexPath)didSelectRowAtIndexPath, in SettingsViewController|| NSIndexPath:row = 0 (first row)|| Shows ChangeBGViewController view, which shows a colour chooser menu|| Change background colour function, for background in MachineViewController, choice of 12 background colours|| YES || 5/11/2009|| Choice of 12 colours|| 
|| nitVectorsOfBGPickers(), in ChangeBGViewController|| No inputs, hardcoded to have 12 colour choices|| NSMutableArray object of BGPicker objects. Then puts all the selected colours on the ChangeBGViewController view|| Makes a vector that holds all the colours, then displays the colour choices on the ChangeBGViewController||YES  ||  5/11/2009||Having a vector to hold the colours makes it easier to add more colours in the future ||
||touchBegan(), for choosing colour in ChangeBGViewController view. Uses resetSelectedToUnselected() in ChangeBGViewController  || BGPicker object (12 choices), which is inherited from UIView, and contains a CGRect with colour information|| Depending on which colour (BGPicker object) is selected, the global variable BGColor:UIColor in static class StaticVariables is changed to the colour of the CGRect on touchesBegan. The selected BGPicker object is slightly expanded and the transparency is changes to setAlpha = 0.30. BGPicker objects that were selected previously is reset back to their original size and transparency (1.00, which is opaque) using resetSelectedToUnselected()|| Choose a background colour and updates the global variable, resets the previously selected BGPicker object (if applicable).|| YES ||  5/11/2009|| || 
|| intComponentImages()|| Object (button that was clicked), the button for selecting which machine to open|| Initialize all .png images for that machine to  ComponentImage (super UIImageView). Sets variables for ComponentImage like position, is_moved, undostack reference, etc. (refer to class diagram). Adds all ComponentImage to an NSMutableArray = componentsVector (keeps tracking the positions easier)|| Creates ComponentImage objects from .png images. Initializes all the variables and references. Adds all components to an vector (NSMutableArray)||YES  ||  5/11/2009|| Calls drawComponentImage() concurrentl|| 
|| drawComponentImage()|| ComponentImage objects||Draw ComponentImages to MachineViewController ||When intComponentImages() is done for each image, this method is called to draw ComponentImages to the machine view (MachineViewController)|| YES ||  5/11/2009|| || 
||touchesBegan() || ComponentImage objects||ComponentImage object becomes semitransparent (setAlpha = 0.70). All other unselected ComponentImage becomes setAlpha = 1.00 (opaque) || When a component is selected, it becomes semitransparent to denote that it is selected. Also, all other components become opaque again.||YES  ||  5/11/2009||Overrides UIImageView method touchesBegan() ||
||touchesMoved(), in MachineViewController view || ComponentImage objects||Track finger movement, move image to continously follow finger ||Dragging ComponentImage || YES ||  5/11/2009|| Overrides UIImageView method touchesMoved()||
||touchedEnded(), in MachineViewController view || ComponentImage objects|| Push position of ComponentImage into UndoStack object (stack initially empty, cannot pop stack if empty). Updates ComponentImage position in the componentsVector.|| When letting go of object, the new position is pushed to the undo stack. This keeps track of the previous position of the component. Position is update in the vector.|| YES ||  5/11/2009|| Overrides UIImageView method touchesEnded()|| 
|| undoAction()|| Object (button that was clicked) the "Undo" button|| Pop last ComponentImage and position of that image from the stack, and update the componentsVector vector with the corresponding ComponentImage and vectors|| Undo function of the program, returns the last image moved to the previous location|| YES ||  5/11/2009|| The undo stack is implemented using NSMutableArray and customized-created nodes (StackNode objects with ComponentImage objects and x,y CGFloats) with custom implemention for push(StackNode) and pop()|| 
|| reset()||Object (button that was clicked) the "Reset" button || Runs intComponentImages (and the corresponding drawComponentImages) again. Resets all the positions in the componentsVector to their original positions|| Reset function of the program, returns all the components to their original locations|| YES ||  5/11/2009|| || 
||backToMain(), automatically added navigation buttons, toolbar buttons, and any other buttons that switch user interface views ||Object (button that was clicked), with the intention of switching views ||Change views according to the button's purpose. Add slide left and right animation. The navigation bar (bar at the top) remembers the last view and adds a back button with the previous view name automatically on the new view. The toolbar (bottom bar) in machine view calls their corresponding methods when touched. The undo/reset calls the methods above, while the comments/photos button calls up new views corresponding to the component selected (version 2.0+ only) || Specifies the navigational control of the user interface|| YES ||  5/11/2009||Does not mention hidden .xib code and methods implemented in the UIView, UIViewController, and other superclasses since they are hidden or inherited without modification. ||

1.3.	Integration Testing


The team shall incrementally integrate and test different components of the system during development. The basic menu features will be tested first, before moving on to viewing machines, interacting with them, and commenting on them, and so on. 
Testing steps:
Step 1 - Verify menu controls and help function 
Without opening a machine, a user should be able to navigate the menu properly, change any basic settings in the settings menu, and be able to view the help documentation at all times by clicking on the "?" icon. 


Step 2 - Opening new machines 
Users should be able to open a machine, as well as switch between machines. 


Step 3 – Manipulating the machine 
Components should be selectable, deselectable, and movable. The zooming functions should work.


Step 4 - Posting new comments and photos 
In this test, the user would try to view and post comments or photos to the server.


Step 5 - Downloading new machines 
Users should be able to download new machines within 5 minutes and view them immediately with no additional settings. They must also be able to perform all the functions listed above.

1.3.1.	Integration Test cases:


1.3.1.1.	Main menu


|| Input|| Output|| Test Date||Test Success ||
|| Click "Start"|| Show list of machines to open|| Nov-05||YES ||
||Click on a machine || Open the selected machine, and show the machine view with tabs below|| Nov-05|| YES||
|| Click on "Download new.."|| Open the Download Machines menu|| Nov-05|| ||
||Click on "Download Machines" || Open the Download Machines menu||Nov-05 || ||
||Click on a machine to download || Download machine and update the list of machines|| Nov-05|| ||
|| Click on "?"|| Show help menu|| Nov-05|| ||
||Click on "View topics" || Show all help topics|| Nov-05|| ||
||Click on "Search" || Show text field and keyboard for entering search term|| Nov-05|| ||
||Click "Report a bug.." ||Show text field and keyboard for bug reporting and submit button|| Nov-05|| YES||
||Click "Settings" and manipulate options ||Show settings menu and change settings as desired || Nov-05||YES ||
 

1.3.1.2.	Machine View, Comments, Photos


|| Input|| Output|| Test Date||Test Success ||
|| Click on a component|| Highlight component with red halo. Show name of component on title bar||Nov-05 ||YES ||
|| Click on empty space|| Un-highlight any component. Show "Overall" on title bar|| Nov-05|| YES||
|| Click on component and drag to left/right/up/down|| Move component left/right/up/down|| Nov-05|| YES||
|| Release component|| Anchor component to place where it was released|| Nov-05|| YES||
||Click undo || Undoes previous action|| Nov-05||YES ||
||Click "Details and Discuss" || Show comments page for component (if selected) or overall machine|| Nov-05|| ||
|| Click "Post new comment..|| Show text field and keyboard for comments and a submit button|| Nov-05|| ||
||Click "Photos" || Show photos page for component (if selected) or overall machine|| Nov-05||YES ||
||Tilt iPhone horizontally ||Does nothing || Nov-05|| YES||
|| Shake iPhone||Resets components positions (if setting is turned on!) || || ||

1.3.2.	Potential bugs:


The following bugs may need to be considered when testing each component of the software. 


1.3.2.1.	Machine View:
	If we want to drag any part of the machine, a possible bug may be that users cannot select the part that users would like to drag. This may be because components are too close together, or that the particular component is not selectable. 
	While dragging a part of the machine, delay may occur due to slow processing speed or other non-functional reasons. For example, the images cannot follow the moving of our finger. In the worst case, it may take 5-10 seconds before seeing the moving of components 
	If we are dragging a part of a machine, and the coordinates are calculated wrongly, then the images would not move to exactly where the users want them to be. 
	While moving a component from one place to another and it passes by another component, the program must not allow users to also drag the images were passed by. 


1.3.2.2.	Commenting and photos:
	If the users type the font that iPhone cannot display the code of the font then it would be shown as confused symbols that cannot be read. Thus, restrictions need to be made on the allowed font, language, colours and size. 
	If the users cannot connect to the server, then their comments and photos are not uploaded. 
	Network errors may occur, causing data that are not received properly. However, this is not an application layer problem but a network or data link layer problem which is out of the team's scope. 
	Images which are too large to upload are rejected. (Max size is 300kb) 
	Discriminatory or vulgar comments need to be filtered. 


Test cases will be added whenever there are new features or when a feature is found to have many bugs. During testing, the team will keep track of the number of failures and the severity of them. Features with high-importance should have no failures at all. All strange and unexpected behavior will be recorded, along with how they occurred. New test cases can then be created for them to avoid reoccurrences. 


1.4.	User Acceptance Testing


There shall be 2 user acceptance tests at different points of the implementation phase: 


- The 1st test date is November 2, 2009 to gain a sense for anything that might be improved early on.


- The 2nd testing date is November 17, 2009 


The testing will be done in two different locations, SFU and in an auto shop. 


SFU


There shall be tests conducted at SFU to test the software in an academic environment, with with university students of varying majors (focused around mechanics). The tests shall be conducted in a variety of settings from load busy hallways to the quiet of the library. This is to test how quickly users can engage in the software in distracting or calm environments. 


An auto shop


The autoshop test shall test the viability of the software in a grungy environment, where the users might not have clean hands. It will also be an opportunity to test the software with trades workers, some of whom have been to trade school, some not. Again the software shall be tested in load and quiet environments. 


1.4.1.	Testing Plan


Case 1: The user will begin in the main menu and will be asked to open a machine by clicking the start button and selecting the machine, and then go back to the main menu by clicking the back button. The user will then be asked to again click the start button and select a machine to load opening the machine view. The user will then be asked to select a part and move it to a different part of the screen. The user will then be asked to comment on the part, by clicking on the comment button. The user will then click post and write a comment on the part and submit it to the server. Finally the user will view the comments for that part and verify that it is on the device. 


A successful test: The test could be considered successful if the user is able to navigate through all the windows as the description of the software says it should, the comment is actually posted, and if this test may be completed within 5 minutes. 


Case 2: The user will begin in the main menu, and will be asked to open the help window. From here the user will be asked to search the help contents for a word of their choice. The user will then be asked to go back and bring up the help table of contents and view a page of their choice. Then the user will be asked to go back to the main menu and open another machine via the start button and selecting their machine. The user will then be asked to select a part and view the photos for that part by clicking the photo button on the control bar. When the user is viewing the photos the user will be asked to add a photo from their iPhone. Finally the user will be asked to go to the photo viewing page and ensure that their new photo is there. 


A successful test: The test could be considered successful if the user is able to navigate through all the windows as the description of the software says it should, the photo is actually posted, and if this test may be completed within 5 minutes. 


1.5.	Version 1 User acceptance test