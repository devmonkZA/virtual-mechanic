<wiki:toc max_depth="3" />

=Software Testing=

The project will use two frameworks to automatically test the software during development. They are:

  #  OCUnit: a unit testing framework for Objective-C that integrates with Xcode. The team writes test cases that include assertions about the code under test. Test suites are collections of test cases that are run uniformly by a test runner. When the tests are run, they check their own results and provide an unambiguous pass or fail message.

  #  X-Code Shark: A framework which also integrates with Xcode. It traces CPU and memory usage by processes and can reveal bottlenecks or areas that can be optimized by multithreading or wrtiting of code.

----

=Internal Deadlines=

|| *Version* || *Action* || *Start Date* || *End Date* || *Supervisor* ||
|| 1 || Unit testing and Revision || October 30, 2009 || November 2, 2009 || Greg ||
|| 1 || Integration testing and Revision || November 2, 2009 || November 4, 2009 || Tyler ||
|| 1 || Submission || - || November 5, 2009 ||  ||
|| 2 || Unit testing and Revision || November 12, 2009 || November 14, 2009 || Chien ||
|| 2 || Integration testing and Revision || November 14, 2009 || November 17, 2009 || Marc ||
|| 2 || Submission || - || November 19, 2009 ||  ||
|| 3 || Unit testing and Revision || November 25, 2009 || November 28, 2009 || Jeff ||
|| 3 || Integration testing and Revision || November 28, 2009 || December 1, 2009 || Greg ||
|| 3 || Submission || - || December 3, 2009 ||  ||

----

=User Testing=

----

=Integration Testing=

4.  Detail what kind of integration testing you expect to do, and how you expect to do it.
It's wise to avoid "big bang" integration, where all the models are combined and
tested at once. Instead, tell us how you plan to incrementally integrate and test the
system. Be clear about how this testing differs from the unit testing you are also
doing.

Intergration testing is the plan that includes all testing of avoiding "big bugs." We use the Bottom Up Testing system to test our application. First, we test the lowest components in the application. If the lowest components are correct, then we test the component that one level higher than the lowest components. We keep this rutine until all level components are correct.

*Step 1 - Download Machine*

In the beginning we will have to download the machine to have something that we can  disassemble, or analyze. Then we can download machines from server and the following bugs may occur.

   
While downloading machine, the possible bug may be the following problem: Cannot downlaod the machien from the server. For exmaple, if we are trying to downlaod the images of a personal computer, we cannot downlaod so the error will occur. This would be a "big but" of downlaoding the images because of the failture of uplaoding images from other usesrs.

*Step 2 - Dragging part of the machine* 

Once we have the machines to disassemble, we may want to drag, disassembl the machine part by part. While users usings their fingers to drag the pictures, the following bugs may occur. 

1.If we wanna drag any part of the machine, the possible bug may occur would be that users cannot selected the part that users would lilke to drag. For example, if the users want to drag the DVD driver in a personal computers and the origional creator did not upoad to ther server, or users cannot get the images from ther server then the user would not able to drag the part they want to.
2.While dragging a part of the machine, delaying may occur. For example, the images cannot follow the moving of our finger. it may takes 5-10 seconds to start move the images.
3.If we are dragging a part of a machine, the cordinate are calcualted wrong, then the images would not move to the exactly place where the users want.
4.One bug maybe occuring in dragging images. For example, while we move an image form on place to other plece and we will pass by an other images, then the users may also drag the images we just pass by.

*Step 3 - Posting new comments*

In this stept, as the highest level, we would try to post the comments to ther server. And the following bugs may occur.

1. If the users type the font that iPhone cannot dispaly the code of the font then it would be shown as confused symbols that cannot be read.
2. If the users cannot connect to the server, then their comments cannot be viewed on others's iPhone so the new comments would only be shown on the users' screen.
3. Transfer error: when we uplolading the comments to ther server, then the comments would be changed into a signal, so there would be some errors in transforming the singals. For example, if we posted the comment "How this work," it may appear in server as "!@# $%! !%!#." 

----

=Size and complexity=

|| *Version* || *Lines of code* || *Number of classes* || *Number of files* || *Number of machines* || *Program size* || 
|| 1 || 200 || 5 || 5 || 1 || 1MB || 
|| 2 || 500 || 6 || 10 || 2 || 2MB || 
|| 3 || 800 || 7 || 15 || 2/3 || 3MB || 

No software tools will be used to measure these figues. Instead, the team will record the actual numbers from observations (ie. noting the number of lines in the xcode, recording the total size of the project folder, etc.) and continuously update these figures.

----

=Miscellaneous=

6.  List everything else you are doing to ensure the quality of your project. Give specific
times and dates whenever possible.

  # Document progress in a thorough manner.
  # Have supervisors for each testing phase for added assurance.
  # Take notes through each use case testing to document errors.
  # Continously update these documents.
  # Notify users of program updates/documentation.
  # Assign a team member as Assurance Officer

----