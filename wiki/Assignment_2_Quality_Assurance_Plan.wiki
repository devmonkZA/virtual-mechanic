<wiki:toc max_depth="3" />

=Software Testing=

The project will use two frameworks to automatically test the software during development. They are:

  #  OCUnit: a unit testing framework for Objective-C that integrates with Xcode. The team writes test cases that include assertions about the code under test. Test suites are collections of test cases that are run uniformly by a test runner. When the tests are run, they check their own results and provide an unambiguous pass or fail message.

  #  X-Code Shark: A framework which also integrates with Xcode. It traces CPU and memory usage by processes and can reveal bottlenecks or areas that can be optimized by multithreading or wrtiting of code.

----

=Internal Deadlines=

|| *Version* || *Action* || *Start Date* || *End Date* || *Supervisor* ||
|| 1 || Unit testing and Revision || October 30, 2009 || November 2, 2009 || Greg ||
|| 1 || Integration testing and Revision || November 2, 2009 || November 4, 2009 || Tyler ||
|| 1 || Submission || - || November 5, 2009 ||  ||
|| 2 || Unit testing and Revision || November 12, 2009 || November 14, 2009 || Chien ||
|| 2 || Integration testing and Revision || November 14, 2009 || November 17, 2009 || Marc ||
|| 2 || Submission || - || November 19, 2009 ||  ||
|| 3 || Unit testing and Revision || November 25, 2009 || November 28, 2009 || Jeff ||
|| 3 || Integration testing and Revision || November 28, 2009 || December 1, 2009 || Greg ||
|| 3 || Submission || - || December 3, 2009 ||  ||

----

=Team FTW User testing=

3. User Acceptance Testing


User Acceptance Test Date: July 29th, 2009 


The user will go through several possible scenarios that demonstrate the features outlined in the original design document. These will include: 

Case1: 

Starting from the main menu, the user will choose to play a song by selecting a song and import it from their music library, then begin playing the level. The user will use touchscreen buttons to navigate their ship through each track, and verify that it is impossible to move through the side walls. During the gameplay, the user's ship will hit several good lane objects, and then hit several bad lane objects. By looking at the progress bar at the top of the screen, the user will note that their progress through the track is being kept. When the track ends, the user will be taken to the end song menu to view their score, and choose the next song to play. 

Desired outcome: 

The user should be able to select a song from the library on their device. Then the song should be imported, and then converted into a track. Afterwards, the user should be able to play the track, until the song finishes. The user will be able to move their ship left and right using the touchscreen buttons, and will not be able to pass through the side walls. When the user's ship hits a good lane object, their score will increase, and will decrease when they hit a bad lane object. Throughout the gameplay, the user's progress should be tracked down by the progress bar. When the song ends, the user should then be brought to the end song menu, they should be shown the top local scores and given the option to choose a new song or go to the next song. If the user chooses the next song, then the next sequential song in their library should start.

Features tested: 
Choose Song Menu 
Importing a Song 
Dynamic Track creation 
Game play 
Touchscreen Button Movement 
Score System 
Progress Bar 
Local High Scores Records 
End Song Menu 
Next Song Play 


Case2: 

Starting from the main menu, the user will select Options, then select accelerometer as the control mode. The user will then select difficulty, and set it to hardest. Then the user will return to the main menu, where they will select new song. The user will select a song from their library to be imported, and a track will be created, then the user will play the track. Using the accelerometer, the user will be able to move their ship left and right, and will not be able to move through the side walls. When then song ends, the user will see the end song menu, and will select view online high scores. Then they will select new song, and will play it.

Desired outcome: 

The user should be able to move from the main menu to the Options menu. From there, the user should be able to find the control mode menu. The user should be given two options, and when the user selects the accelerometer, the game should acknowledge this and bring the user back to the Options menu. When they select difficulty, it should give them the choice of easy, medium, and hard. After the user selects hard as their difficulty, the game should acknowledge it and bring them back to the options menu. The user should then be able to return to the main menu. From there, the user should be able to play a new song. While playing, the user should be able to use the accelerometer to control their ship. The user should notice that the more they tilt left/right, the faster they move left/right, and will not be able to move through the side walls. Also, the user should notice that their ship is moving faster than normal, and the objects are spaced closer due to the increased difficulty. After the level is finished, the user should be shown the end song menu. When the user select view online high scores, their device should connect them to the online server, and will show a list of the highest scores for that particular song. Then the the user selects choose new song, which should bring the user back to the Choose New Song menu.


Features Tested: 
Options Menu 
Accelerometer Menu 
Difficulty Menu 
Accelerometer control 
Difficulty 
Online Records 
New song from end song menu 

Case3: 

From the main menu, the user will select Instructions. The user will be given the option to view a tutorial, in which case, the user will decline and be returned to the main menu. Then the user will select help again, and will accept the tutorial. The game will give the user a demonstration on how to import a song and play the game. At the end of the tutorial, the user will be given the options to watch again, or go back to main menu. The user will choose to watch again, then the user will choose to go back to the main menu when they are given the options at the end of the tutorial.


Desired Outcome: 

The user should be able to go to the help menu from the main menu by selecting Instructions, and should be able to return to the main menu. When the user selects a tutorial, the user should be able to watch the corresponding tutorial. At the end of the tutorial, the user should have the options to watch the tutorial again after it is finished, or to return to the main menu.

Features Tested: 
Instructions 
Tutorial

----
=User Acceptence Testing=
There shall be 2 user acceptence tests at different points of the implementation phase:

*(Not sure exacly when this shall be any1 have any ideas?)*

- The 1st earlier in the phase to gain a sense for anything that might be improved early on.<br>
- The 2nd towards the end of the project not after having finished (what would be the point)
== Testing Locations ==
The testing will be done in two different locations:

===Sfu===
There shall be tests conducted at sfu to test the software in an academic enviroment, with with university students of varying majors (focused around mechanics).  The tests shall be conducted in a variety of settings from load busy hallways to the quiet of the library. This is to test how quickly users can engage in the software in distracting or calm enviroments.  
===An auto shop===
The autoshop test shall test the viability of the software in a grungy enviroment, where the users might not have clean hands.  It will also be an opportunity to test the software with trades workers, some of whom have been to trade school, some not.  Again the software shall be tested in load and quiet enviroments.
== Testing Plan==
The tester will have the following list:

Iphone experience
- Load a machine and move parts of the machine (2 min)
- Comment/view photos of a part/machine (4 min)

No Iphone experience
- Load a machine and move parts of the machine (10 min)
- Comment on a part/machine (20 min)

The test subject will first be asked if they have any experience with the ipod touch or iphone.  The test subject is then told to experiment with the software and see what they think.  A stopwatch is started when the user begins to experiment.  At 2 min into the test(10 min for a user with no iphone experience) the user will be asked to go to the main menu and open a machine, and move some of the parts of the machine.  If the user is able to perform the required tasks then the user acceptence test has been passed.  This procedure is repeated for other items on the list.
----

=Integration Testing=

The team shall incrementally integrate and test different components of the system during development. The basic menu features will be tested first, before moving on to viewing machines, interacting with them, and commenting on them, and so on. 

*Step 1 - Verify menu controls and help funtion*

Without opening a machine, a user should be able to navigate the menu properly, change any basic settings in the settings menu, and be able to view the help documentation at all times by clicking on the "?" icon. 

*Step 2 - Opening new machines*

Users should be able to open a machine, switch between machines, and selecting different components of the machine. 

*Step 3 - Dragging part of the machine* 

Components should be moveable by selecting them and moving them with the user's fingers. The following bugs may occur:

  #  If we want to drag any part of the machine, a possible bug may be that users cannot select the part that users would like to drag. This may be because components are too close together, or that the particular component is not selectable. 

  #  While dragging a part of the machine, delay may occur due to slow processing speed or other non-funtional reasons. For example, the images cannot follow the moving of our finger. In the worst case, it may take 5-10 seconds before seeing the moving of components

  #  If we are dragging a part of a machine, and the coordinates are calculated wrongly, then the images would not move to exactly where the users want them to be.

  #  While moving a component from one place to another and it passes by another component, the program must not allow users to also drag the images were passed by.

*Step 4 - Posting new comments and photos*

In this high-level test, the user would try to view and post comments or photos to the server. The following issues may occur:

  #  If the users type the font that iPhone cannot display the code of the font then it would be shown as confused symbols that cannot be read. Thus, restrictions need to be made on the allowed font, language, colours and size. 
  #  If the users cannot connect to the server, then their comments and photos are not uploaded.
  #  Network errors may occur, causing data that are not received properly. However, this is not an application layer problem but a network or data link layer problem which is out of the team's scope. 
  #  Images which are too large to upload are rejected. (Max size is 300kb)
  #  Discriminatory or vulgar comments need to be filtered.

*Step 5 - Downloading new machines*

Users should be able to download new machines within 10 minutes and view them immediately with no additional settings. They must also be able to perform all the functions listed above.

----

=Size and complexity=

|| *Version* || *Lines of code* || *Number of classes* || *Number of files* || *Number of machines* || *Program size* || 
|| 1 || 200 || 5 || 5 || 1 || 1MB || 
|| 2 || 500 || 6 || 10 || 2 || 2MB || 
|| 3 || 800 || 7 || 15 || 2/3 || 3MB || 

No software tools will be used to measure these figues. Instead, the team will record the actual numbers from observations (ie. noting the number of lines in the xcode, recording the total size of the project folder, etc.) and continuously update these figures.

----

=Miscellaneous=

6.  List everything else you are doing to ensure the quality of your project. Give specific
times and dates whenever possible.

  # Document progress in a thorough manner.
  # Have supervisors for each testing phase for added assurance.
  # Take notes through each use case testing to document errors.
  # Continously update these documents.
  # Notify users of program updates/documentation.
  # Assign a team member as Assurance Officer

----