<wiki:toc max_depth="3" />

=Software Testing=

The project will use two frameworks to automatically test the software during development. They are:

  #  OCUnit: a unit testing framework for Objective-C that integrates with Xcode. The team writes test cases that include assertions about the code under test. Test suites are collections of test cases that are run uniformly by a test runner. When the tests are run, they check their own results and provide an unambiguous pass or fail message.

  #  X-Code Shark: A framework which also integrates with Xcode. It traces CPU and memory usage by processes and can reveal bottlenecks or areas that can be optimized by multithreading or wrtiting of code.

----

=Internal Deadlines=

|| *Version* || *Action* || *Start Date* || *End Date* || *Supervisor* ||
|| 1 || Unit testing and Revision || October 30, 2009 || November 2, 2009 || Greg ||
|| 1 || Integration testing and Revision || November 2, 2009 || November 4, 2009 || Tyler ||
|| 1 || Submission || - || November 5, 2009 ||  ||
|| 2 || Unit testing and Revision || November 12, 2009 || November 14, 2009 || Chien ||
|| 2 || Integration testing and Revision || November 14, 2009 || November 17, 2009 || Marc ||
|| 2 || Submission || - || November 19, 2009 ||  ||
|| 3 || Unit testing and Revision || November 25, 2009 || November 28, 2009 || Jeff ||
|| 3 || Integration testing and Revision || November 28, 2009 || December 1, 2009 || Greg ||
|| 3 || Submission || - || December 3, 2009 ||  ||

----

=User Testing=

----

=Integration Testing=

The team shall incrementally integrate and test different components of the system during development. The basic menu features will be tested first, before moving on to viewing machines, interacting with them, and commenting on them, and so on. 

*Step 1 - Verify menu controls and help funtion*

Without opening a machine, a user should be able to navigate the menu properly, change any basic settings in the settings menu, and be able to view the help documentation at all times by clicking on the "?" icon. 

*Step 2 - Opening new machines*

Users should be able to open a machine, switch between machines, and selecting different components of the machine. 

*Step 3 - Dragging part of the machine* 

Components should be moveable by selecting them and moving them with the user's fingers. The following bugs may occur:

  #  If we want to drag any part of the machine, a possible bug may be that users cannot select the part that users would like to drag. This may be because components are too close together, or that the particular component is not selectable. 

  #  While dragging a part of the machine, delay may occur due to slow processing speed or other non-funtional reasons. For example, the images cannot follow the moving of our finger. In the worst case, it may take 5-10 seconds before seeing the moving of components

  #  If we are dragging a part of a machine, and the coordinates are calculated wrongly, then the images would not move to exactly where the users want them to be.

  #  While moving a component from one place to another and it passes by another component, the program must not allow users to also drag the images were passed by.

*Step 4 - Posting new comments and photos*

In this high-level test, the user would try to view and post comments or photos to the server. The following issues may occur:

  #  If the users type the font that iPhone cannot display the code of the font then it would be shown as confused symbols that cannot be read. Thus, restrictions need to be made on the allowed font, language, colours and size. 
  #  If the users cannot connect to the server, then their comments and photos are not uploaded.
  #  Network errors may occur, causing data that are not received properly. However, this is not an application layer problem but a network or data link layer problem which is out of the team's scope. 
  #  Images which are too large to upload are rejected. (Max size is 300kb)
  #  Discriminatory or vulgar comments need to be filtered.

*Step 5 - Downloading new machines*

Users should be able to download new machines within 10 minutes and view them immediately with no additional settings. They must also be able to perform all the functions listed above.

----

=Size and complexity=

|| *Version* || *Lines of code* || *Number of classes* || *Number of files* || *Number of machines* || *Program size* || 
|| 1 || 200 || 5 || 5 || 1 || 1MB || 
|| 2 || 500 || 6 || 10 || 2 || 2MB || 
|| 3 || 800 || 7 || 15 || 2/3 || 3MB || 

No software tools will be used to measure these figues. Instead, the team will record the actual numbers from observations (ie. noting the number of lines in the xcode, recording the total size of the project folder, etc.) and continuously update these figures.

----

=Miscellaneous=

6.  List everything else you are doing to ensure the quality of your project. Give specific
times and dates whenever possible.

  # Document progress in a thorough manner.
  # Have supervisors for each testing phase for added assurance.
  # Take notes through each use case testing to document errors.
  # Continously update these documents.
  # Notify users of program updates/documentation.
  # Assign a team member as Assurance Officer

----